{"ast":null,"code":"import { firebase, auth } from \"../../config/firebase\";\nexport const login = () => {\n  return new Promise((resolve, reject) => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider).then(result => {\n      /** @type {firebase.auth.OAuthCredential} */\n      var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n      var token = credential.accessToken; // The signed-in user info.\n\n      var user = result.user;\n      const userData = {\n        user,\n        token\n      }; // const usersRef = firebase.firestore().collection(\"users\");\n      // usersRef\n      // \t.doc(user.uid)\n      // \t.set(user)\n      // \t.then(() => {\n      // \t\tlocalStorage.setItem(\"user\", JSON.stringify(userData));\n      // \t\tresolve(result);\n      // \t})\n      // \t.catch((error) => {\n      // \t\treject(error);\n      // \t});\n    }).catch(error => {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message; // The email of the user's account used.\n\n      var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n      var credential = error.credential; // ...\n\n      console.log(errorMessage);\n      reject(errorMessage);\n    });\n  });\n};\nexport const logout = () => {\n  localStorage.removeItem(\"user\");\n  auth.signOut();\n};\nexport const checkUser = () => {\n  const UserData = JSON.parse(localStorage.getItem(\"user\"));\n  return UserData === null || UserData === void 0 ? void 0 : UserData.user;\n};","map":{"version":3,"sources":["D:/Projects/Aucti/aucti-web/src/redux/services/userService.js"],"names":["firebase","auth","login","Promise","resolve","reject","provider","GoogleAuthProvider","signInWithPopup","then","result","credential","token","accessToken","user","userData","catch","error","errorCode","code","errorMessage","message","email","console","log","logout","localStorage","removeItem","signOut","checkUser","UserData","JSON","parse","getItem"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,IAAnB,QAA+B,uBAA/B;AAEA,OAAO,MAAMC,KAAK,GAAG,MAAM;AAC1B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,UAAMC,QAAQ,GAAG,IAAIN,QAAQ,CAACC,IAAT,CAAcM,kBAAlB,EAAjB;AACAP,IAAAA,QAAQ,CACNC,IADF,GAEEO,eAFF,CAEkBF,QAFlB,EAGEG,IAHF,CAGQC,MAAD,IAAY;AACjB;AACA,UAAIC,UAAU,GAAGD,MAAM,CAACC,UAAxB,CAFiB,CAGjB;;AACA,UAAIC,KAAK,GAAGD,UAAU,CAACE,WAAvB,CAJiB,CAKjB;;AACA,UAAIC,IAAI,GAAGJ,MAAM,CAACI,IAAlB;AACA,YAAMC,QAAQ,GAAG;AAChBD,QAAAA,IADgB;AAEhBF,QAAAA;AAFgB,OAAjB,CAPiB,CAYjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA1BF,EA2BEI,KA3BF,CA2BSC,KAAD,IAAW;AACjB;AACA,UAAIC,SAAS,GAAGD,KAAK,CAACE,IAAtB;AACA,UAAIC,YAAY,GAAGH,KAAK,CAACI,OAAzB,CAHiB,CAIjB;;AACA,UAAIC,KAAK,GAAGL,KAAK,CAACK,KAAlB,CALiB,CAMjB;;AACA,UAAIX,UAAU,GAAGM,KAAK,CAACN,UAAvB,CAPiB,CAQjB;;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AAEAf,MAAAA,MAAM,CAACe,YAAD,CAAN;AACA,KAvCF;AAwCA,GA1CM,CAAP;AA2CA,CA5CM;AA8CP,OAAO,MAAMK,MAAM,GAAG,MAAM;AAC3BC,EAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACA1B,EAAAA,IAAI,CAAC2B,OAAL;AACA,CAHM;AAKP,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC9B,QAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWN,YAAY,CAACO,OAAb,CAAqB,MAArB,CAAX,CAAjB;AACA,SAAOH,QAAP,aAAOA,QAAP,uBAAOA,QAAQ,CAAEhB,IAAjB;AACA,CAHM","sourcesContent":["import { firebase, auth } from \"../../config/firebase\";\r\n\r\nexport const login = () => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst provider = new firebase.auth.GoogleAuthProvider();\r\n\t\tfirebase\r\n\t\t\t.auth()\r\n\t\t\t.signInWithPopup(provider)\r\n\t\t\t.then((result) => {\r\n\t\t\t\t/** @type {firebase.auth.OAuthCredential} */\r\n\t\t\t\tvar credential = result.credential;\r\n\t\t\t\t// This gives you a Google Access Token. You can use it to access the Google API.\r\n\t\t\t\tvar token = credential.accessToken;\r\n\t\t\t\t// The signed-in user info.\r\n\t\t\t\tvar user = result.user;\r\n\t\t\t\tconst userData = {\r\n\t\t\t\t\tuser,\r\n\t\t\t\t\ttoken,\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// const usersRef = firebase.firestore().collection(\"users\");\r\n\t\t\t\t// usersRef\r\n\t\t\t\t// \t.doc(user.uid)\r\n\t\t\t\t// \t.set(user)\r\n\t\t\t\t// \t.then(() => {\r\n\t\t\t\t// \t\tlocalStorage.setItem(\"user\", JSON.stringify(userData));\r\n\t\t\t\t// \t\tresolve(result);\r\n\t\t\t\t// \t})\r\n\t\t\t\t// \t.catch((error) => {\r\n\t\t\t\t// \t\treject(error);\r\n\t\t\t\t// \t});\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\t// Handle Errors here.\r\n\t\t\t\tvar errorCode = error.code;\r\n\t\t\t\tvar errorMessage = error.message;\r\n\t\t\t\t// The email of the user's account used.\r\n\t\t\t\tvar email = error.email;\r\n\t\t\t\t// The firebase.auth.AuthCredential type that was used.\r\n\t\t\t\tvar credential = error.credential;\r\n\t\t\t\t// ...\r\n\t\t\t\tconsole.log(errorMessage);\r\n\r\n\t\t\t\treject(errorMessage);\r\n\t\t\t});\r\n\t});\r\n};\r\n\r\nexport const logout = () => {\r\n\tlocalStorage.removeItem(\"user\");\r\n\tauth.signOut();\r\n};\r\n\r\nexport const checkUser = () => {\r\n\tconst UserData = JSON.parse(localStorage.getItem(\"user\"));\r\n\treturn UserData?.user;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}