{"ast":null,"code":"import { firebase, auth, firestore } from \"../../config/firebase\";\nexport const login = role => {\n  return new Promise((resolve, reject) => {\n    if (!role) {\n      reject(\"No role selected\");\n    }\n\n    const provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider).then(result => {\n      /** @type {firebase.auth.OAuthCredential} */\n      var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n      var token = credential.accessToken; // The signed-in user info.\n\n      var user = result.user;\n      const userData = {\n        user,\n        token\n      };\n      const uid = user.uid;\n      const userCollection = firestore.collection(\"users\");\n      const userDoc = userCollection.doc(uid);\n\n      if (userDoc !== null && !userDoc.id) {\n        userDoc.set({\n          name: user.displayName,\n          email: user.email,\n          role: role\n        }).then(() => {\n          localStorage.setItem(\"user\", JSON.stringify(userData));\n          resolve(result);\n        }).catch(err => reject(err));\n      }\n\n      localStorage.setItem(\"user\", JSON.stringify(userData));\n      resolve(result);\n    }).catch(error => {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message; // The email of the user's account used.\n\n      var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n      var credential = error.credential; // ...\n\n      console.log(errorMessage);\n      reject(errorMessage);\n    });\n  });\n};\nexport const logout = () => {\n  localStorage.removeItem(\"user\");\n  auth.signOut();\n};\nexport const checkUser = () => {\n  const UserData = JSON.parse(localStorage.getItem(\"user\"));\n  return UserData === null || UserData === void 0 ? void 0 : UserData.user;\n};","map":{"version":3,"sources":["D:/Projects/Aucti/aucti-web/src/redux/services/userService.js"],"names":["firebase","auth","firestore","login","role","Promise","resolve","reject","provider","GoogleAuthProvider","signInWithPopup","then","result","credential","token","accessToken","user","userData","uid","userCollection","collection","userDoc","doc","id","set","name","displayName","email","localStorage","setItem","JSON","stringify","catch","err","error","errorCode","code","errorMessage","message","console","log","logout","removeItem","signOut","checkUser","UserData","parse","getItem"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,IAAnB,EAAyBC,SAAzB,QAA0C,uBAA1C;AAEA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU;AAC9B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,QAAI,CAACH,IAAL,EAAW;AACVG,MAAAA,MAAM,CAAC,kBAAD,CAAN;AACA;;AACD,UAAMC,QAAQ,GAAG,IAAIR,QAAQ,CAACC,IAAT,CAAcQ,kBAAlB,EAAjB;AACAT,IAAAA,QAAQ,CACNC,IADF,GAEES,eAFF,CAEkBF,QAFlB,EAGEG,IAHF,CAGQC,MAAD,IAAY;AACjB;AACA,UAAIC,UAAU,GAAGD,MAAM,CAACC,UAAxB,CAFiB,CAGjB;;AACA,UAAIC,KAAK,GAAGD,UAAU,CAACE,WAAvB,CAJiB,CAKjB;;AACA,UAAIC,IAAI,GAAGJ,MAAM,CAACI,IAAlB;AACA,YAAMC,QAAQ,GAAG;AAChBD,QAAAA,IADgB;AAEhBF,QAAAA;AAFgB,OAAjB;AAIA,YAAMI,GAAG,GAAGF,IAAI,CAACE,GAAjB;AACA,YAAMC,cAAc,GAAGjB,SAAS,CAACkB,UAAV,CAAqB,OAArB,CAAvB;AACA,YAAMC,OAAO,GAAGF,cAAc,CAACG,GAAf,CAAmBJ,GAAnB,CAAhB;;AACA,UAAIG,OAAO,KAAK,IAAZ,IAAoB,CAACA,OAAO,CAACE,EAAjC,EAAqC;AACpCF,QAAAA,OAAO,CACLG,GADF,CACM;AACJC,UAAAA,IAAI,EAAET,IAAI,CAACU,WADP;AAEJC,UAAAA,KAAK,EAAEX,IAAI,CAACW,KAFR;AAGJvB,UAAAA,IAAI,EAAEA;AAHF,SADN,EAMEO,IANF,CAMO,MAAM;AACXiB,UAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAed,QAAf,CAA7B;AACAX,UAAAA,OAAO,CAACM,MAAD,CAAP;AACA,SATF,EAUEoB,KAVF,CAUSC,GAAD,IAAS1B,MAAM,CAAC0B,GAAD,CAVvB;AAWA;;AACDL,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAed,QAAf,CAA7B;AACAX,MAAAA,OAAO,CAACM,MAAD,CAAP;AACA,KAhCF,EAiCEoB,KAjCF,CAiCSE,KAAD,IAAW;AACjB;AACA,UAAIC,SAAS,GAAGD,KAAK,CAACE,IAAtB;AACA,UAAIC,YAAY,GAAGH,KAAK,CAACI,OAAzB,CAHiB,CAIjB;;AACA,UAAIX,KAAK,GAAGO,KAAK,CAACP,KAAlB,CALiB,CAMjB;;AACA,UAAId,UAAU,GAAGqB,KAAK,CAACrB,UAAvB,CAPiB,CAQjB;;AACA0B,MAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AAEA9B,MAAAA,MAAM,CAAC8B,YAAD,CAAN;AACA,KA7CF;AA8CA,GAnDM,CAAP;AAoDA,CArDM;AAuDP,OAAO,MAAMI,MAAM,GAAG,MAAM;AAC3Bb,EAAAA,YAAY,CAACc,UAAb,CAAwB,MAAxB;AACAzC,EAAAA,IAAI,CAAC0C,OAAL;AACA,CAHM;AAKP,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC9B,QAAMC,QAAQ,GAAGf,IAAI,CAACgB,KAAL,CAAWlB,YAAY,CAACmB,OAAb,CAAqB,MAArB,CAAX,CAAjB;AACA,SAAOF,QAAP,aAAOA,QAAP,uBAAOA,QAAQ,CAAE7B,IAAjB;AACA,CAHM","sourcesContent":["import { firebase, auth, firestore } from \"../../config/firebase\";\r\n\r\nexport const login = (role) => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tif (!role) {\r\n\t\t\treject(\"No role selected\");\r\n\t\t}\r\n\t\tconst provider = new firebase.auth.GoogleAuthProvider();\r\n\t\tfirebase\r\n\t\t\t.auth()\r\n\t\t\t.signInWithPopup(provider)\r\n\t\t\t.then((result) => {\r\n\t\t\t\t/** @type {firebase.auth.OAuthCredential} */\r\n\t\t\t\tvar credential = result.credential;\r\n\t\t\t\t// This gives you a Google Access Token. You can use it to access the Google API.\r\n\t\t\t\tvar token = credential.accessToken;\r\n\t\t\t\t// The signed-in user info.\r\n\t\t\t\tvar user = result.user;\r\n\t\t\t\tconst userData = {\r\n\t\t\t\t\tuser,\r\n\t\t\t\t\ttoken,\r\n\t\t\t\t};\r\n\t\t\t\tconst uid = user.uid;\r\n\t\t\t\tconst userCollection = firestore.collection(\"users\");\r\n\t\t\t\tconst userDoc = userCollection.doc(uid);\r\n\t\t\t\tif (userDoc !== null && !userDoc.id) {\r\n\t\t\t\t\tuserDoc\r\n\t\t\t\t\t\t.set({\r\n\t\t\t\t\t\t\tname: user.displayName,\r\n\t\t\t\t\t\t\temail: user.email,\r\n\t\t\t\t\t\t\trole: role,\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\tlocalStorage.setItem(\"user\", JSON.stringify(userData));\r\n\t\t\t\t\t\t\tresolve(result);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch((err) => reject(err));\r\n\t\t\t\t}\r\n\t\t\t\tlocalStorage.setItem(\"user\", JSON.stringify(userData));\r\n\t\t\t\tresolve(result);\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\t// Handle Errors here.\r\n\t\t\t\tvar errorCode = error.code;\r\n\t\t\t\tvar errorMessage = error.message;\r\n\t\t\t\t// The email of the user's account used.\r\n\t\t\t\tvar email = error.email;\r\n\t\t\t\t// The firebase.auth.AuthCredential type that was used.\r\n\t\t\t\tvar credential = error.credential;\r\n\t\t\t\t// ...\r\n\t\t\t\tconsole.log(errorMessage);\r\n\r\n\t\t\t\treject(errorMessage);\r\n\t\t\t});\r\n\t});\r\n};\r\n\r\nexport const logout = () => {\r\n\tlocalStorage.removeItem(\"user\");\r\n\tauth.signOut();\r\n};\r\n\r\nexport const checkUser = () => {\r\n\tconst UserData = JSON.parse(localStorage.getItem(\"user\"));\r\n\treturn UserData?.user;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}